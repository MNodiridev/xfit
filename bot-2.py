
# requirements: python-telegram-bot==20.0
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import os
import re
import sqlite3
from datetime import datetime
import smtplib
from email.message import EmailMessage

TOKEN = os.getenv("TG_BOT_TOKEN")
CLUB_NAME = os.getenv("CLUB_NAME", "X-fit Premium Dushanbe")

# --- Email / SMTP settings ---
SMTP_HOST = os.getenv("SMTP_HOST")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD") or os.getenv("SMTP_PASS")
EMAIL_FROM = os.getenv("EMAIL_FROM") or SMTP_USER
EMAIL_TO = "sales@x-fit.tj"

# --- DB settings ---
DB_PATH = os.getenv("DB_PATH", "guest_visits.db")

# --- States for conversation ---
ASK_NAME, ASK_PHONE = range(2)

# --- Simple phone regex (accepts +country and digits, spaces, dashes, parentheses) ---
PHONE_RE = re.compile(r"^[+]?[-() 0-9]{6,20}$")

# Feedback form (existing)
FEEDBACK_FORM_URL = os.getenv(
    "FEEDBACK_FORM_URL",
    "https://docs.google.com/forms/d/e/1FAIpQLSdg9cKHTec26MQhBa13T5nefHNKaUnaXxEOiCaAnzPoeZwO4g/viewform?usp=header/viewform",
)

def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üßë‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã"],
            ["üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üéüÔ∏è –ì–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç", "‚úç –ñ–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"],
        ],
        resize_keyboard=True,
    )

# --------------- DB ---------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        '''
        CREATE TABLE IF NOT EXISTS guest_requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_user_id INTEGER,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            created_at TEXT NOT NULL
        )
        '''
    )
    conn.commit()
    conn.close()

def insert_request(tg_user_id: int, name: str, phone: str) -> int:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO guest_requests (tg_user_id, name, phone, created_at) VALUES (?, ?, ?, ?)",
        (tg_user_id, name, phone, datetime.utcnow().isoformat() + "Z"),
    )
    conn.commit()
    req_id = cur.lastrowid  # sequential unique number
    conn.close()
    return req_id

# --------------- EMAIL ---------------
def send_email(subject: str, body: str) -> None:
    if not (SMTP_HOST and SMTP_PORT and EMAIL_FROM and EMAIL_TO):
        print("[EMAIL] SMTP env is not fully configured. Subject:", subject)
        print("[EMAIL] Body:\n", body)
        return

    msg = EmailMessage()
    msg["From"] = EMAIL_FROM
    msg["To"] = EMAIL_TO
    msg["Subject"] = subject
    msg.set_content(body)

    with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
        server.starttls()
        if SMTP_USER and SMTP_PASSWORD:
            server.login(SMTP_USER, SMTP_PASSWORD)
        server.send_message(msg)

# --------------- HANDLERS ---------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {CLUB_NAME}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu()
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=main_menu())

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"‚úç –û—Å—Ç–∞–≤—å—Ç–µ –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{FEEDBACK_FORM_URL}",
        reply_markup=main_menu(),
    )

# ---- Guest visit flow ----
def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)

async def guest_visit_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéüÔ∏è –ì–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é* –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=cancel_keyboard(),
        parse_mode="Markdown",
    )
    return ASK_NAME

async def guest_visit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name or name.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return ConversationHandler.END
    if len(name) < 2:
        await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return ASK_NAME
    context.user_data["guest_name"] = name
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, +992 900 00 00 00).",
        reply_markup=cancel_keyboard(),
        parse_mode="Markdown",
    )
    return ASK_PHONE

async def guest_visit_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return ConversationHandler.END

    if not PHONE_RE.match(text):
        await update.message.reply_text(
            "–ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ +. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return ASK_PHONE

    name = context.user_data.get("guest_name", "").strip()
    phone = text
    tg_user_id = update.effective_user.id if update.effective_user else None

    # Save to DB -> get sequential ID
    req_id = insert_request(tg_user_id, name, phone)

    # Email
    subject = f"–ó–∞—è–≤–∫–∞ –∏–∑ –±–æ—Ç–∞ ‚Ññ{req_id}"
    body = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç\n"
        f"‚Ññ: {req_id}\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"TG user id: {tg_user_id}\n"
        f"–ö–ª—É–±: {CLUB_NAME}\n"
        f"–í—Ä–µ–º—è: {datetime.utcnow().isoformat()}Z"
    )
    try:
        send_email(subject, body)
        email_status = "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    except Exception as e:
        email_status = f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}"

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! {email_status}\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: ‚Ññ{req_id}. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_menu(),
    )
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    if text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        msg = "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n–ü–Ω‚Äì–ü—Ç: 6:00‚Äì23:00\n–°–±‚Äì–í—Å: 7:00‚Äì22:00"
    elif text == "üßë‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã":
        msg = "üßë‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã:\n- –ê–ª–∏ ‚Äî —Å–∏–ª–æ–≤—ã–µ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ\n- –î–∏–ª—à–æ–¥ ‚Äî –±–æ–∫—Å, –∫—Ä–æ—Å—Å—Ñ–∏—Ç\n- –°–∞–±–∏–Ω–∞ ‚Äî —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥, –ø–∏–ª–∞—Ç–µ—Å"
    elif text == "üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã":
        msg = "üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n1 –º–µ—Å ‚Äî 400 —Å–æ–º–æ–Ω–∏\n3 –º–µ—Å ‚Äî 1050 —Å–æ–º–æ–Ω–∏\n(–ø—Ä–∏–º–µ—Ä ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –≤–∞—à–∏ —Ü–µ–Ω—ã –ø–æ–∑–∂–µ)"
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        msg = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüìç –î—É—à–∞–Ω–±–µ, —É–ª. –ú—É—Ö–∞–º–º–∞–¥–∏–µ–≤–∞, 24/2\nüì± +992 48 8888 555"
    elif text == "‚úç –ñ–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
        msg = f"‚úç –û—Å—Ç–∞–≤—å—Ç–µ –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{FEEDBACK_FORM_URL}"
    elif text == "üéüÔ∏è –ì–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç":
        return await guest_visit_entry(update, context)
    else:
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ:"

    await update.message.reply_text(msg, reply_markup=main_menu())

def build_app() -> Application:
    if not TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TG_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    init_db()

    app = Application.builder().token(TOKEN).build()

    # Commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("feedback", feedback))

    # Guest visit conversation
    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üéüÔ∏è –ì–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç$"), guest_visit_entry)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, guest_visit_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, guest_visit_phone)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), guest_visit_entry)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # Fallback text handler
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    return app

def main():
    app = build_app()
    print(f"–ë–æ—Ç {CLUB_NAME} –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
