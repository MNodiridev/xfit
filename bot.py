
# requirements: python-telegram-bot==20.0
import logging
import os
import re
import smtplib
import sqlite3
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Optional

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    Contact,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# === Config via ENV ===
TOKEN = os.getenv("TG_BOT_TOKEN")
CLUB_NAME = os.getenv("CLUB_NAME", "X-fit Premium Dushanbe")
EMAIL_TO = os.getenv("EMAIL_TO", "sales@x-fit.tj")
SMTP_HOST = os.getenv("SMTP_HOST")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASS = os.getenv("SMTP_PASS")
SMTP_USE_TLS = os.getenv("SMTP_USE_TLS", "1") == "1"

DB_PATH = os.getenv("DB_PATH", "guest_visits.sqlite3")
# Public info (for "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
WORKING_HOURS = os.getenv("WORKING_HOURS", "Mon‚ÄìSun: 06:00‚Äì23:00")
CLUB_MAP_URL = os.getenv("CLUB_MAP_URL", "")
CLUB_WEBSITE = os.getenv("CLUB_WEBSITE", "https://x-fit.tj")
CLUB_ADDRESS = os.getenv("CLUB_ADDRESS", "Dushanbe, Muhammadieva St. 24/2")
CLUB_EMAIL = os.getenv("CLUB_EMAIL", "info@x-fit.tj")
CLUB_PHONE = os.getenv("CLUB_PHONE", "+992 48 8888 555")
CLUB_PHONE = _env_multi("CLUB_PHONE", "–í–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –∂–¥—É—Ç", default="+992 48 8888 555")
CLUB_EMAIL = _env_multi("CLUB_EMAIL", "–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫", default="info@x-fit.tj")
CLUB_ADDRESS = _env_multi("CLUB_ADDRESS", "–ù–∞—Ö–æ–¥–∏–º—Å—è", default="–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –ú—É—Ö–∞–º–º–∞–¥–∏–µ–≤–∞, 24/2")
CLUB_WEBSITE = _env_multi("CLUB_WEBSITE", "–û–Ω–ª–∞–π–Ω", default="https://x-fit.tj")
CLUB_MAP_URL = os.getenv("CLUB_MAP_URL", "")

def _env_multi(*keys: str, default: str = "") -> str:
    for k in keys:
        v = os.getenv(k)
        if v:
            return v
    return default


# === Logging ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# === DB init ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    conn.execute(
        '''
        CREATE TABLE IF NOT EXISTS guest_visits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            tg_user_id INTEGER,
            tg_username TEXT,
            created_at TEXT
        )
        '''
    )
    conn.commit()
    conn.close()

def _db_connect():
    return sqlite3.connect(DB_PATH)

def _db_execute(query: str, params: tuple = ()):
    with _db_connect() as conn:
        cur = conn.execute(query, params)
        conn.commit()
        return cur

def insert_guest(name: str, phone: str, tg_user_id: int, tg_username: Optional[str]) -> int:
    cur = _db_execute(
        "INSERT INTO guest_visits (name, phone, tg_user_id, tg_username, created_at) VALUES (?,?,?,?,?)",
        (name, phone, tg_user_id, tg_username, datetime.utcnow().isoformat() + "Z"),
    )
    return int(cur.lastrowid)

def normalize_phone(text: str) -> Optional[str]:
    if not text:
        return None
    digits = re.sub(r"[^\d+]", "", text)
    only_digits = re.sub(r"\D", "", digits)
    if len(only_digits) < 7:
        return None
    if digits and not digits.startswith("+") and len(only_digits) >= 10:
        digits = "+" + only_digits
    return digits

def send_email(application_id: int, name: str, phone: str, update: Update):
    if not SMTP_HOST or not SMTP_USER or not SMTP_PASS:
        logger.warning("SMTP not configured; skipping email send.")
        return False

    subject = f"–ó–∞—è–≤–∫–∞ —Å –¢–ì –±–æ—Ç–∞ ‚Ññ{application_id}"
    body = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç –≤ {CLUB_NAME}\n\n"
        f"ID –∑–∞—è–≤–∫–∏: {application_id}\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"TG user: @{(update.effective_user.username or '')}\n"
        f"TG user id: {update.effective_user.id}\n"
        f"–î–∞—Ç–∞ (UTC): {datetime.utcnow().isoformat()}Z\n"
    )

    msg = MIMEMultipart()
    msg["From"] = SMTP_USER
    msg["To"] = EMAIL_TO
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain", "utf-8"))

    try:
        if SMTP_USE_TLS:
            with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
                server.starttls()
                server.login(SMTP_USER, SMTP_PASS)
                server.sendmail(SMTP_USER, [EMAIL_TO], msg.as_string())
        else:
            with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
                server.login(SMTP_USER, SMTP_PASS)
                server.sendmail(SMTP_USER, [EMAIL_TO], msg.as_string())
        return True
    except Exception:
        logger.exception("Email send failed")
        return False

    subject = f"–ó–∞—è–≤–∫–∞ —Å –¢–ì –±–æ—Ç–∞ ‚Ññ{application_id}"
    body = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç –≤ {CLUB_NAME}\n\n"
        f"ID –∑–∞—è–≤–∫–∏: {application_id}\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"TG user: @{(update.effective_user.username or '')}\n"
        f"TG user id: {update.effective_user.id}\n"
        f"–î–∞—Ç–∞ (UTC): {datetime.utcnow().isoformat()}Z\n"
    )

    msg = MIMEMultipart()
    msg["From"] = SMTP_USER
    msg["To"] = EMAIL_TO
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain", "utf-8"))

    try:
        if SMTP_USE_TLS:
            server = smtplib.SMTP(SMTP_HOST, SMTP_PORT)
            server.starttls()
        else:
            server = smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT)
        server.login(SMTP_USER, SMTP_PASS)
        server.sendmail(SMTP_USER, [EMAIL_TO], msg.as_string())
        server.quit()
        return True
    except Exception as e:
        logger.error(f"Email send failed: {e}")
        return False


# === Public info text ===
def contacts_text():
    lines = [
        "üìç –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        WORKING_HOURS,
        "",
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:",
        CLUB_PHONE,
        CLUB_EMAIL,
        "",
        "üìç –ê–¥—Ä–µ—Å:",
        CLUB_ADDRESS,
    ]
    if CLUB_WEBSITE:
        lines.extend(["", "üåê –°–∞–π—Ç:", CLUB_WEBSITE])
    if CLUB_MAP_URL:
        lines.extend(["", "üó∫Ô∏è –ö–∞—Ä—Ç–∞:", CLUB_MAP_URL])
    return "\n".join(lines)

# === States ===
(
    MAIN_MENU,
    GUEST_NAME,
    GUEST_PHONE_WAIT,
) = range(3)

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üßë‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã"],
            ["üí¨ –ñ–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "üéüÔ∏è –ì–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç"],
        ],
        resize_keyboard=True,
    )

async def _reply_menu(update: Update, text: str):
    await update.message.reply_text(text, reply_markup=main_menu_keyboard())

def guest_phone_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä –∏–∑ Telegram", request_contact=True)],
            ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _reply_menu(update, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {CLUB_NAME}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")
    return MAIN_MENU

async def to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _reply_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().lower()
    if "–≥–æ—Å—Ç–µ–≤–æ–π" in text:
        # Start guest visit flow: first ask name
        await update.message.reply_text(
            "üéüÔ∏è –ì–æ—Å—Ç–µ–≤–æ–π –≤–∏–∑–∏—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è (–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è)?",
            reply_markup=ReplyKeyboardRemove(),
        )
        return GUEST_NAME
    elif "–∂–∞–ª–æ–±—ã" in text:
        await _reply_menu(update, "–û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É üëâ https://forms.gle/example")
        return MAIN_MENU
    elif "—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã" in text or "–∫–æ–Ω—Ç–∞–∫—Ç—ã" in text:
        await _reply_menu(update, contacts_text())
        return MAIN_MENU

    else:
        await _reply_menu(update, "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç.")
        return MAIN_MENU

async def guest_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if len(name) < 2:
        await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â—ë —Ä–∞–∑:")
        return GUEST_NAME
    context.user_data["guest_name"] = name
    # Ask for phone
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
        "–í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ Telegram\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +992 900 000 000)",
        reply_markup=guest_phone_keyboard(),
    )
    return GUEST_PHONE_WAIT

async def guest_get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = None
    if update.message.contact and isinstance(update.message.contact, Contact):
        phone = normalize_phone(update.message.contact.phone_number)
    else:
        phone = normalize_phone(update.message.text or "")

    if not phone:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX:",
            reply_markup=guest_phone_keyboard(),
        )
        return GUEST_PHONE_WAIT

    name = context.user_data.get("guest_name", "").strip() or "‚Äî"
    user = update.effective_user

    # Save to DB
    try:
        application_id = insert_guest(name, phone, user.id, user.username)
    except Exception as e:
        logger.exception("DB insert failed")
        await _reply_menu(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return MAIN_MENU

    # Send email
    email_ok = send_email(application_id, name, phone, update)

    confirm = (
        f"–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ ‚Ññ{application_id} –ø—Ä–∏–Ω—è—Ç–∞.\n"
        f"–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞."
    )
    if not email_ok:
        confirm += "\n\n‚ö†Ô∏è –ü–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã)."

    await _reply_menu(update, confirm)
    context.user_data.pop("guest_name", None)
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await _reply_menu(update, "–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return MAIN_MENU

def build_application() -> Application:
    if not TOKEN:
        raise RuntimeError("TG_BOT_TOKEN is not set")
    app = Application.builder().token(TOKEN).build()

    # Conversation for guest visit
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.Regex("(?i)–≥–æ—Å—Ç–µ–≤–æ–π"), handle_main_menu)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu),
            ],
            GUEST_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, guest_get_name),
                MessageHandler(filters.Regex("(?i)–Ω–∞–∑–∞–¥"), to_menu),
            ],
            GUEST_PHONE_WAIT: [
                MessageHandler(filters.CONTACT, guest_get_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, guest_get_phone),
                MessageHandler(filters.Regex("(?i)–Ω–∞–∑–∞–¥"), to_menu),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("menu", to_menu)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    # Quick /menu command
    app.add_handler(CommandHandler("menu", to_menu))
    return app

def main():
    init_db()
    app = build_application()
    logger.info("Bot is starting...")
    app.run_polling()

if __name__ == "__main__":
    main()
